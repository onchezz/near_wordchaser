use serde_json::json;

//this function creates  initial random data for  the wordchaser game
//this immitates a simple rest api for json respond
pub fn how_to_play_json() -> serde_json::Value {
  let playinfo = json!([
  {
    "info": "Start the Game",
    "description": "to start playing the game call Â»",
    "method": "random_num "
  },
  {
    "info": "To check completed words ",
    "description": " this function views completed words",
    "method": "view_completed"
  },
  {
    "info": "To view available words ",
    "description": "view words that are available to play with  that are not completed ",
    "method": "view_uncompleted_words"
  },
  {
    "info": "To View if your guess is correct ",
    "description": "compares your guess to the random number generated by the user",
    "method": "check_solution"
  },
  {
    "info": "To get help",
    "description": "Know how to play this game",
    "method": "how_to_play"
  },

    ]);
  playinfo
}






// use near_rng::Rng;

// #[near_bindgen]
// #[derive(Default, BorshDeserialize, BorshSerialize)]
// pub struct Counter {
//   val: i32,
// }

// #[near_bindgen]
// impl Counter {
//   pub fn increment(&mut self) {
//     let mut rng = Rng::new(&env::random_seed());
//     let value = rng.rand_range_i32(0, 20);
//     self.val += value;
//   }
// }